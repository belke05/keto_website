//NOTE createcontext
current context val is determined by value prop of nearest mycontext RTCStatsProvider
component when this component updates it will trigger a re render
of the underliying component
usecontext will only let you read not write to the context 

great example
const themes = {
  light: {
    foreground: "#000000",
    background: "#eeeeee"
  },
  dark: {
    foreground: "#ffffff",
    background: "#222222"
  }
};

const ThemeContext = React.createContext(themes.light);

function App() {
  return (
    <ThemeContext.Provider value={themes.dark}>
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar(props) {
  return (
    <div>
      <ThemedButton />
    </div>
  );
}

function ThemedButton() {
  const theme = useContext(ThemeContext);

  return (
    <button style={{ background: theme.background, color: theme.foreground }}>
      I am styled by theme context!
    </button>
  );
}

//NOTE sessionstorage or route 
we have 2 options to get user info 
in this instance we will use the sessionstorage where we saved
the user to to set up our context so that 
we can access user info anywhere in the app 